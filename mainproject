#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define SEARCH_NUMBER 10

bool compare(int i)
{
    return (i == SEARCH_NUMBER);
}

int compare_for_binary_search(int i)
{
    if (i > SEARCH_NUMBER) {
        return 1;
    }
    if (i < SEARCH_NUMBER) {
        return -1;
    }
    return 0;
}

vector<int>::iterator sequential_search(vector<int>::iterator begin, vector<int>::iterator end, function<bool(int)> f)
{
    for (vector<int>::iterator it = begin; it != end; it++)
    {
        if (f(*it))
        {
            return it;
        }
    }
    return end;
}

vector<int>::iterator own_binary_search(vector<int>::iterator begin, vector<int>::iterator end, function<int(int)> f)
{
   if (begin == end) {
       return end;
   }

   int distance = std::distance(begin, end);
   vector<int>::iterator middle = begin + distance / 2;
   int cmp = f(*middle);
   if (cmp == 0) {
       return middle;
   } else if (cmp == 1) {
       return own_binary_search(middle + 1, end, f);
   }
   return own_binary_search(begin, middle - 1, f);
}


int main(int argc, char *argv[])
{
    vector<int> numbers;
    numbers.push_back(10);
    numbers.push_back(8);
    numbers.push_back(9);
    numbers.push_back(0);
    //
    cout << *sequential_search(numbers.begin(), numbers.end(), compare) << endl;
    vector<int> sortedNumbers;
    sortedNumbers.push_back(0);
    sortedNumbers.push_back(8);
    sortedNumbers.push_back(9);
    sortedNumbers.push_back(10);
    cout << *own_binary_search(numbers.begin(), numbers.end(), compare_for_binary_search) << endl;
    return 0;
}
